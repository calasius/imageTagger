/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.despegar.visio.tagger;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author claudio.gauna
 */
public class ImageTagger extends javax.swing.JFrame {
    
    
    private File imageFolder;
    private File tagFile;
    private File counterFile;
    private int nextImageIndex;
    private  File[] imageFiles;
    private String[] tags = {"a","b"};

    /**
     * Creates new form ImageTagger
     */
    public ImageTagger(File imageFolder, File tagFile, File counterFile) {
                this.imageFolder = imageFolder;
        this.tagFile = tagFile;
        this.counterFile = counterFile;
        this.nextImageIndex = loadNextImageIndex();
        this.imageFiles = this.imageFolder.listFiles();
        initComponents();
        loadImage();
        this.tagOptionList.setListData(tags);

    }
    
    private int loadNextImageIndex() {
        try {
            Scanner scanner = new Scanner(this.counterFile);
            int lastIndex = scanner.nextInt();
            return lastIndex;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ImageTagger.class.getName()).log(Level.SEVERE, String.format("Counter file =  doesn't exist.", this.counterFile.getAbsolutePath()), ex);
        }
        return 0;
    }
    
    private boolean loadImage() {
        if(nextImageIndex > this.imageFiles.length) {
            return false;
        } else {
            File imageFile = this.imageFiles[nextImageIndex];
            try {
                Logger.getLogger(ImageTagger.class.getName()).log(Level.INFO, String.format("Loading image %s ...", imageFile.getName()));
                BufferedImage image = ImageIO.read(imageFile);
                image = resizeImage(image);
                ImageIcon icon = new ImageIcon(image);
                this.imagePanel.getViewport().add(new JLabel(icon));
            } catch (IOException ex) {
                Logger.getLogger(ImageTagger.class.getName()).log(Level.SEVERE, String.format("Can't load image %s = ", imageFile.getName()));
            } catch (Exception e) {
                Logger.getLogger(ImageTagger.class.getName()).log(Level.SEVERE, String.format("Can't load image %s = ", imageFile.getName()));
            }
        }
        return false;
    }
    
    private BufferedImage resizeImage(BufferedImage image) {
        int width = this.imagePanel.getWidth()-20;
        int height = this.imagePanel.getHeight()-20;
        Logger.getLogger(ImageTagger.class.getName()).log(Level.INFO, String.format("Width = %s, height = %s", width, height));
        Image resized =  image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        BufferedImage buffered = new BufferedImage(width, height, Image.SCALE_REPLICATE);
        buffered.getGraphics().drawImage(resized, 0, 0 , null);
        return buffered;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel = new javax.swing.JScrollPane();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagOptionList = new javax.swing.JList<>();
        tagButton = new javax.swing.JButton();
        toCsvButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        tagOptionList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(tagOptionList);

        tagButton.setText("Tag");
        tagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagButtonActionPerformed(evt);
            }
        });

        toCsvButton.setText("To csv");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(previousButton)
                        .addGap(180, 180, 180)
                        .addComponent(nextButton)))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tagButton)
                        .addGap(72, 72, 72)
                        .addComponent(toCsvButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(imagePanel))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousButton)
                    .addComponent(nextButton)
                    .addComponent(tagButton)
                    .addComponent(toCsvButton))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        // TODO add your handling code here:
        if (this.nextImageIndex > 0) {
            this.nextImageIndex--;
            loadImage();
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        if (this.nextImageIndex < this.imageFiles.length-1){
            this.nextImageIndex++;
            loadImage();
        }

    }//GEN-LAST:event_nextButtonActionPerformed

    private void tagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagButtonActionPerformed
        // TODO add your handling code here:
        File imageFile = this.imageFiles[this.nextImageIndex];
        try { 
            FileWriter writer = new FileWriter(this.tagFile, true);
            writer.append(imageFile.getName());
            writer.append(",");
            writer.append(this.tagOptionList.getSelectedValue());
            writer.append("\n");
            writer.flush();
            writer.close();
            writer = new FileWriter(this.counterFile);
            writer.append(this.nextImageIndex + "");
            writer.flush();
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(ImageTagger.class.getName()).log(Level.SEVERE, "Can't open tagFile", ex);
        }
    }//GEN-LAST:event_tagButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageTagger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageTagger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageTagger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageTagger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        String imageFolderArg = args[0];
        String tagFileArg = args[1];
        String counterFileArg = args[2];
        
        System.out.println(String.format("Image folder = %s", imageFolderArg));
        System.out.println(String.format("Tag file = %s", tagFileArg));
        System.out.println(String.format("Counter file = %s", counterFileArg));
        
        File imageFolder = new File(imageFolderArg);
        File tagFile = new File(tagFileArg);
        File counterFile = new File(counterFileArg);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageTagger(imageFolder, tagFile, counterFile).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane imagePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton tagButton;
    private javax.swing.JList<String> tagOptionList;
    private javax.swing.JButton toCsvButton;
    // End of variables declaration//GEN-END:variables
}
